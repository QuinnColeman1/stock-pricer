[tool.poetry]
name = "stock-pricer"
version = "0.1.0"
description = "A script to fetch & price stocks with trend detection and Monte Carlo simulations"
authors = ["quinn <your.email@example.com>"]
readme = "README.md"
packages = [{include = "stock_pricer"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
numpy = "^1.24.0"
pandas = "^2.0.0"
yfinance = "^0.2.28"
matplotlib = "^3.7.0"
plotly = "^5.17.0"
streamlit = "^1.28.0"
scipy = "^1.10.0"
scikit-learn = "^1.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pylint = "^3.0.0"
isort = "^5.12.0"
pre-commit = "^3.5.0"
bandit = "^1.7.5"  # Kept for security checks
ruff = "^0.13.2"  # Kept for linting
# Type stubs for better type checking
types-python-dateutil = "^2.9.0.20250822"
types-pytz = "^2025.2.0.20250809"
pandas-stubs = "^2.3.2.250926"
scipy-stubs = "^1.16.2.0"
plotly-stubs = {version = ">=0.0.6,<0.0.7", python = ">=3.11,<3.14"}
types-pyyaml = "^6.0.12.20250915"
types-requests = "^2.32.4.20250913"
types-setuptools = "^80.9.0.20250822"
pytest-mock = "^3.15.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88

[tool.ruff]
# Set the maximum line length.
line-length = 105

# Ignore specific rules
target-version = "py311"

# File patterns to include
include = ["*.py", "*.pyi"]

# File patterns to exclude
extend-exclude = [
    "**/.eggs/",
    "**/.git/",
    "**/.hg/",
    "**/.mypy_cache/",
    "**/.tox/",
    "**/.venv/",
    "**/build/",
    "**/dist/",
]

[tool.ruff.lint]
# Enable all the rules we want
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "EM",  # flake8-errmsg
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]

# Ignore specific rules
ignore = [
    "EM101",  # String literal exceptions
    "EM102",  # f-string literal exceptions
    "B904",   # Exception chaining
    "T201",   # Allow print statements
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when they start with '_'.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Maximum complexity for functions/methods/etc.
[tool.ruff.lint.mccabe]
max-complexity = 10

# Import sorting configuration
[tool.ruff.lint.isort]
# Use one blank line for imports.
lines-after-imports = 1
# How to handle type imports.
known-first-party = ["stock_pricer"]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
# Allow some common test patterns in test files.
"tests/*.py" = [
    "S101",    # Use of assert detected
    "ARG001",  # Unused function argument
    "PLR2004", # Magic value used in comparison
    "F841",    # Allow unused variables in test files
    "ANN",     # Allow missing type annotations in tests
    "D",       # Allow missing docstrings in tests
    "S",       # Allow assert statements in tests
    "T20"      # Allow print statements in tests
]

# Allow some common patterns in Jupyter notebooks.
"*.ipynb" = [
    "E402",  # Module level import not at top of file
    "F821",  # Undefined name
]

# Ignore unused imports in __init__.py files
"__init__.py" = ["F401"]

# Ignore specific patterns in streamlit app
"streamlit_app.py" = ["F401", "F841"]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
severity = "medium"
confidence = "medium"

[tool.coverage.run]
source = ["stock_pricer"]
omit = ["*/tests/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false